type ZoneNode {
  id: ID!
  name: String
  description: String
  descriptionSv: String
  residentPrice: Float!
}

type AddressNode {
  id: ID!
  streetName: String
  streetNumber: Int
  streetNameSv: String
  city: String
  citySv: String
  postalCode: String
}

type CustomerNode {
  firstName: String!
  lastName: String!
  nationalIdNumber: String
  primaryAddress: AddressNode
  email: String
  phoneNumber: String
}

type VehicleNode {
  manufacturer: String!
  model: String!
  registrationNumber: String!
  isLowEmission: Boolean!
  holder: String!
}

enum ParkingPermitStatus {
  DRAFT
  ARRIVED
  PROCESSING
  ACCEPTED
  REJECTED
  PAYMENT_IN_PROGRESS
  VALID
  CLOSED

}

type PermitNode {
  identifier: Int!
  customer: CustomerNode!
  vehicle: VehicleNode
  parkingZone: ZoneNode
  status: ParkingPermitStatus!
  startTime: String
  endTime: String
}

type PageInfo {
  numPages: Int!
  page: Int!
  next: Int
  prev: Int
}

type PagedPermits {
  objects: [PermitNode]
  pageInfo: PageInfo
}

enum OrderDirection {
  ASC,
  DESC
}

input PageInput {
  page: Int!
  pageSize: Int
}

input OrderByInput {
  field: String!
  orderFields: [String]!
  orderDirection: OrderDirection!
}

input SearchItem {
  matchType: String!
  fields: [String]!
  value: String!
}

type ChangeLog {
  id: ID!
  event: String!
  description: String!
  createdAt: String!
  createdBy: String!
}

type PermitDetailNode {
  identifier: Int!
  customer: CustomerNode!
  vehicle: VehicleNode
  parkingZone: ZoneNode
  status: ParkingPermitStatus!
  startTime: String
  endTime: String
  consentLowEmissionAccepted: Boolean
  contractType: String
  monthCount: Int
  monthsLeft: Int
  monthlyPrice: Float
  currentPeriodEndTime: String
  changeLogs: [ChangeLog]!
}

type Query {
  permits(
    pageInput: PageInput!
    orderBy: OrderByInput
    searchItems: [SearchItem]
   ): PagedPermits!
  permitDetail(permitId: ID!): PermitDetailNode!
  zones: [ZoneNode]
}

input ZoneInput {
  name: String
  description: String
  descriptionSv: String
  residentPrice: Float
}

input AddressInput {
  streetName: String
  streetNumber: Int
  streetNameSv: String
  city: String
  citySv: String
  postalCode: String
}

input CustomerInput {
  firstName: String!
  lastName: String!
  address: AddressInput
  addressSecurityBan: Boolean
  nationalIdNumber: String
  zone: ZoneInput
  phoneNumber: String
  email: String
  driverLicenseChecked: Boolean
}

input VehicleUserInput {
  firstName: String
  lastName: String
  nationalIdNumber: String
}

input VehicleInput {
  manufacturer: String!
  model: String!
  registrationNumber: String!
  productionYear: Int!
  emission: Int!
  isLowEmission: Boolean!
  lastInspectionDate: String!
  holder: VehicleUserInput
  owner: VehicleUserInput
  serialNumber: String
  type: String
  engineType: String
  consentLowEmissionAccepted: Boolean!
}

input ResidentPermitInput {
  contractType: String
  customer: CustomerInput!
  vehicle: VehicleInput
  status: ParkingPermitStatus!
  startTime: String
  monthCount: Int
}

type MutationResponse {
  success: Boolean
}

enum PermitEndType {
  IMMEDIATELY
  AFTER_CURRENT_PERIOD
}

type Mutation {
  createResidentPermit(permit: ResidentPermitInput!): MutationResponse
  endPermit(permitId: Int!, endType: PermitEndType!, iban: String): MutationResponse
}
