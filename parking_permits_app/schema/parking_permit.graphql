type ZoneNode  {
  id: ID!
  shared_product_id: String
  name: String
  description: String
  description_sv: String
  location: [[[[Float]]]]
}

type AddressNode  {
  id: ID!
  street_name: String
  street_number: Int
  street_name_sv: String
  city: String
  city_sv: String
  postal_code: String
  location: [Float]
  zone: ZoneNode
}

enum Language {
  FINNISH
  ENGLISH
  SWEDISH
}

type CustomerNode {
  id: ID!
  first_name: String!
  last_name: String!
  language: Language
  email: String
  phone_number: String
  primary_address: AddressNode
  other_address: AddressNode
  token: String
}

type VehicleTypeNode {
  id: ID!
  type: String
}

type VehicleNode {
  id: ID!
  type: VehicleTypeNode!
  manufacturer: String
  model: String
  production_year: Int
  registration_number: String
  emission: Int
  is_low_emission: Boolean
}

type PriceNode {
  price_net: Float!
  price_vat: Float!
  price_gross: Float!
  vat_percentage: Int!
}

type PermitNode {
  id: ID!
  zone: ID!
  vehicle: VehicleNode!
  prices: PriceNode!
  contract_type: String
  month_count: Int
  start_type: String
  start_time: String
  end_time: String
  status: String
  consent_low_emission_accepted: Boolean
  primary_vehicle: Boolean
}

type PermitResult {
  success: Boolean!
  errors: [String]
  permits: [PermitNode]
}

type Query {
  profile: CustomerNode!
  getPermits: PermitResult
}

type CreateOrUpdatePermitResult {
  success: Boolean!
  errors: [String]
  permit: PermitNode
}

type DeletePermitResult {
  success: Boolean!
  errors: [String]
}

type Mutation {
  createParkingPermit(zoneId: ID!, registration: String!): CreateOrUpdatePermitResult!
  deleteParkingPermit(permitId: ID!): DeletePermitResult!
  updateParkingPermit(
    permitId: ID!
    input: ParkingPermitInput!
  ): CreateOrUpdatePermitResult!
}

input ParkingPermitInput {
  primaryVehicle: Boolean
  startTime: String
  endTime: String
  startType: String
  contractType: String
  monthCount: Int
}
