type LocationData {
  addressLocation: [Float]
  zoneId: String
  zoneName: String
  zoneArea: [[[[Float]]]]
}

type AddressNode @key(fields: "id") @extends {
  id: ID! @external
  address: String! @external
  locationData: LocationData! @requires(fields: "address")
}

type Query {
  admin_email: String
}

type Mutation {
  createParkingPermit(input: ParkingPermitInput!): ParkingPermitPayload!
  updateParkingPermit(
    parkingPermit: ID!
    input: ParkingPermitInput!
  ): ParkingPermitPayload!
}

enum ParkingPermitStatus {
  DRAFT
  PAID
  CANCELLED
  EXPIRED
}

enum ParkingPermitContractType {
  FIXED_PERIOD
  OPEN_ENDED
}

type ParkingPermit {
  identifier: Int!
  status: ParkingPermitStatus!
  contractType: ParkingPermitContractType!
}

input ParkingPermitInput {
  vehicleRegistrationNumber: ID!
  status: ParkingPermitStatus!
  contractType: ParkingPermitContractType!
}

type ParkingPermitPayload {
  error: Boolean
  errorMessage: String
  parkingPermit: ParkingPermit
}
