type ProductNode {
  id: ID!
  type: String!
  unitPrice: Float!
  unit: String!
  startDate: String!
  endDate: String!
  vat: Float!
  vatPercentage: Float!
  zone: String!
  lowEmissionDiscount: Float!
  secondaryVehicleIncreaseRate: Float!
  modifiedAt: String
  modifiedBy: String
}

type ZoneNode {
  name: String
  label: String
  labelSv: String
  residentProducts: [ProductNode]
}

type AddressNode {
  id: ID!
  streetName: String
  streetNumber: String
  streetNameSv: String
  city: String
  citySv: String
  postalCode: String
  location: [Float]
  zone: ZoneNode
}

type CustomerActivePermit {
  id: ID!
  primaryVehicle: Boolean!
}

type CustomerNode {
  firstName: String
  lastName: String
  nationalIdNumber: String
  primaryAddress: AddressNode
  otherAddress: AddressNode
  zone: String
  email: String
  phoneNumber: String
  addressSecurityBan: Boolean
  driverLicenseChecked: Boolean
  activePermits: [CustomerActivePermit]
}

type VehicleNode {
  manufacturer: String!
  model: String!
  registrationNumber: String!
  consentLowEmissionAccepted: Boolean!
  serialNumber: String
  isLowEmission: Boolean
  vehicleClass: String
  euroClass: Int
  emission: Int
  emissionType: String
  powerType: String
}

type AnnouncementNode {
  id: ID!
  subjectFi: String!
  contentFi: String!
  subjectSv: String!
  contentSv: String!
  subjectEn: String!
  contentEn: String!
  parkingZones: [ZoneNode]
  createdAt: String!
  createdBy: String
}

enum ParkingPermitStatus {
  DRAFT
  ARRIVED
  PROCESSING
  ACCEPTED
  REJECTED
  PAYMENT_IN_PROGRESS
  VALID
  CLOSED
}

type PermitNode {
  id: ID!
  customer: CustomerNode!
  vehicle: VehicleNode
  parkingZone: ZoneNode
  status: ParkingPermitStatus!
  address: AddressNode
  startTime: String
  endTime: String
  description: String
  type: String
  primaryVehicle: Boolean!
}

type RefundNode {
  id: ID!
  name: String
  amount: Float!
  iban: String!
  status: String!
  description: String
  createdAt: String
  createdBy: String
  modifiedAt: String
  modifiedBy: String
  acceptedAt: String
  acceptedBy: String
  order: OrderNode
}

type OrderNode {
  id: ID!
  totalPrice: Float!
  customer: CustomerNode!
  paidTime: String
  paymentType: String
  orderPermits: [PermitNode]
}

type PageInfo {
  numPages: Int!
  page: Int!
  next: Int
  prev: Int
  startIndex: Int!
  endIndex: Int!
  count: Int!
}

type PagedPermits {
  objects: [PermitNode]
  pageInfo: PageInfo
}

type PagedProducts {
  objects: [ProductNode]
  pageInfo: PageInfo
}

type PagedRefunds {
  objects: [RefundNode]
  pageInfo: PageInfo
}

type PagedOrders {
  objects: [OrderNode]
  pageInfo: PageInfo
}

type PagedAddresses {
  objects: [AddressNode]
  pageInfo: PageInfo
}

type PagedAnnouncements {
  objects: [AnnouncementNode]
  pageInfo: PageInfo
}

type PagedCustomers {
  objects: [CustomerNode]
  pageInfo: PageInfo
}

enum OrderDirection {
  ASC,
  DESC
}

input PageInput {
  page: Int!
  pageSize: Int
}

input OrderByInput {
  orderField: String!
  orderDirection: OrderDirection!
}

input SearchField {
  matchType: String!
  fieldName: String!
}

input SearchItem {
  connector: String!
  fields: [SearchField]!
  value: String!
}

type ChangeLog {
  id: ID!
  event: String!
  description: String!
  createdAt: String!
  createdBy: String!
}

type PermitDetailNode {
  id: ID!
  customer: CustomerNode!
  vehicle: VehicleNode
  primaryVehicle: Boolean!
  parkingZone: ZoneNode
  status: ParkingPermitStatus!
  startTime: String
  endTime: String
  description: String
  consentLowEmissionAccepted: Boolean
  contractType: String
  monthCount: Int
  monthsLeft: Int
  totalRefundAmount: Float
  currentPeriodEndTime: String
  canEndImmediately: Boolean
  canEndAfterCurrentPeriod: Boolean
  canBeRefunded: Boolean
  changeLogs: [ChangeLog]!
  permitPrices: [PermitPriceNode]
}

type PermitPriceChange {
  product: String!
  previousPrice: Float!
  newPrice: Float!
  priceChange: Float!
  priceChangeVat: Float!
  startDate: String!
  endDate: String!
  monthCount: Int!
}

type LowEmissionCriterionNode {
  id: ID!
  powerType: String!
  nedcMaxEmissionLimit: Int
  wltpMaxEmissionLimit: Int
  euroMinClassLimit: Int
  startDate: String
  endDate: String
}

type PagedLowEmissionCriteria {
  objects: [LowEmissionCriterionNode]
  pageInfo: PageInfo
}

type PermitPriceNode {
  originalUnitPrice: Float!
  unitPrice: Float!
  startDate: String!
  endDate: String!
  quantity: Int!
}

input OrderSearchParamsInput {
  q: String!
  startDate: String!
  endDate: String!
  contractTypes: String!
  paymentTypes: String!
  priceDiscounts: String!
  parkingZone: String!
}

input PermitSearchParamsInput {
  q: String!
  status: String!
}

input CustomerSearchParamsInput {
  name: String!
  nationalIdNumber: String!
}

input RefundSearchParamsInput {
  q: String!
  startDate: String!
  endDate: String!
  status: String!
  paymentTypes: String!
}

type Query {
  permits(
    pageInput: PageInput!
    orderBy: OrderByInput
    searchParams: PermitSearchParamsInput
   ): PagedPermits!
  permitDetail(permitId: ID!): PermitDetailNode!
  zones: [ZoneNode]
  customers(
    pageInput: PageInput!
    orderBy: OrderByInput
    searchParams: CustomerSearchParamsInput
  ): PagedCustomers!
  customer(nationalIdNumber: String!): CustomerNode!
  vehicle(regNumber: String!, nationalIdNumber: String!): VehicleNode!
  products(
    pageInput: PageInput!
    orderBy: OrderByInput
  ): PagedProducts!
  product(productId: ID!): ProductNode!
  zoneByLocation(location: [Float]!): ZoneNode!
  refunds(
    pageInput: PageInput!
    orderBy: OrderByInput
    searchParams: RefundSearchParamsInput
  ): PagedRefunds!
  refund(refundId: ID!): RefundNode!
  permitPriceChangeList(permitId: ID!, permitInfo: ResidentPermitInput!): [PermitPriceChange]
  orders(
    pageInput: PageInput!
    orderBy: OrderByInput
    searchParams: OrderSearchParamsInput
  ): PagedOrders!
  addresses(
    pageInput: PageInput!
    orderBy: OrderByInput
  ): PagedAddresses!
  address(addressId: ID!): AddressNode!
  lowEmissionCriteria(
    pageInput: PageInput!
    orderBy: OrderByInput
  ): PagedLowEmissionCriteria!
  lowEmissionCriterion(criterionId: ID!): LowEmissionCriterionNode!
  permitPrices(permit: ResidentPermitInput!, isSecondary: Boolean!): [PermitPriceNode]!
  announcements(
    pageInput: PageInput!
    orderBy: OrderByInput
  ): PagedAnnouncements!
  announcement(announcementId: ID!): AnnouncementNode!
}

input AddressInput {
  sourceSystem: String
  sourceId: String
  streetName: String
  streetNumber: String
  streetNameSv: String
  city: String
  citySv: String
  postalCode: String
  location: [Float]
}

input ZoneInput {
  name: String
  label: String
  labelSv: String
}

input CustomerInput {
  firstName: String
  lastName: String
  nationalIdNumber: String
  primaryAddress: AddressInput
  otherAddress: AddressInput
  zone: String
  email: String
  phoneNumber: String
  addressSecurityBan: Boolean
  driverLicenseChecked: Boolean
}

input VehicleInput {
  manufacturer: String!
  model: String!
  registrationNumber: String!
  serialNumber: String!
  consentLowEmissionAccepted: Boolean!
  vehicleClass: String!
  euroClass: Int!
  emission: Int!
  emissionType: String!
  powerType: String!
}

input ResidentPermitInput {
  contractType: String
  customer: CustomerInput!
  vehicle: VehicleInput
  status: ParkingPermitStatus!
  startTime: String
  endTime: String
  monthCount: Int
  description: String
}

input ProductInput {
  type: String!
  zone: String!
  unitPrice: Float!
  unit: String!
  startDate: String!
  endDate: String!
  vatPercentage: Float!
  lowEmissionDiscount: Float!
}

input RefundInput {
  name: String!
  iban: String!
}

input LowEmissionCriterionInput {
  powerType: String!
  nedcMaxEmissionLimit: Int
  wltpMaxEmissionLimit: Int
  euroMinClassLimit: Int
  startDate: String
  endDate: String
}

input AnnouncementInput {
  subjectFi: String!
  contentFi: String!
  subjectSv: String!
  contentSv: String!
  subjectEn: String!
  contentEn: String!
  parkingZones: [String]
}

type MutationResponse {
  success: Boolean
}

type CreatePermitResponse {
  success: Boolean
  permit: PermitNode
}

enum PermitEndType {
  IMMEDIATELY
  AFTER_CURRENT_PERIOD
}

type Mutation {
  createResidentPermit(permit: ResidentPermitInput!): CreatePermitResponse
  endPermit(permitId: ID!, endType: PermitEndType!, iban: String): MutationResponse
  updateResidentPermit(permitId: ID!, permitInfo: ResidentPermitInput!, iban: String): MutationResponse
  updateProduct(productId: ID!, product: ProductInput!): MutationResponse
  deleteProduct(productId: ID!): MutationResponse
  createProduct(product: ProductInput!): MutationResponse
  updateRefund(refundId: ID!, refund: RefundInput!): MutationResponse
  updateAddress(addressId: ID!, address: AddressInput!): MutationResponse
  deleteAddress(addressId: ID!): MutationResponse
  createAddress(address: AddressInput!): MutationResponse
  updateLowEmissionCriterion(criterionId: ID!, criterion: LowEmissionCriterionInput!): MutationResponse
  deleteLowEmissionCriterion(criterionId: ID!): MutationResponse
  createLowEmissionCriterion(criterion: LowEmissionCriterionInput!): MutationResponse
  requestForApproval(ids: [ID]!): Int
  acceptRefunds(ids: [ID]!): Int
  createAnnouncement(announcement: AnnouncementInput!): MutationResponse
}
